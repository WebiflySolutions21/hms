#!/bin/bash

# Define colors for output messages
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Get Git information
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
GIT_DIR=$(git rev-parse --git-dir)
GIT_REPO_ROOT=$(git rev-parse --show-toplevel)

cd "$GIT_REPO_ROOT" || {
    echo "❌ Failed to change to repository root."
    exit 1
}

# Check for unresolved merge conflicts
MERGE_CONFLICTS=$(git diff --name-only --diff-filter=U)

# Check if Git is in a merge state
MERGE_IN_PROGRESS=false
if [ -f "${GIT_DIR}/MERGE_HEAD" ]; then
    MERGE_IN_PROGRESS=true
fi

# Block direct commits to the test branch, but allow merge conflict resolution
if [ "$CURRENT_BRANCH" == "test" ] && [ -z "$MERGE_CONFLICTS" ] && [ "$MERGE_IN_PROGRESS" == "false" ]; then
    echo -e "${RED}❌ ERROR: Direct commits to the 'test' branch are not allowed.${NC}"
    echo "Please use a feature branch and merge your changes to 'test'."
    exit 1
fi

# If merge conflicts exist, stop the commit and prompt the user to resolve them
if [ -n "$MERGE_CONFLICTS" ]; then
    echo -e "${RED}❌ Merge conflicts detected! Resolve them before committing.${NC}"
    exit 1
fi

# Get list of changed files
CHANGED_FILES=$(git diff --cached --name-only)

## Run PHP-CS-Fixer only on changed PHP files
#PHP_FILES=$(echo "$CHANGED_FILES" | grep -E '^backend/.*\.php$')
#if [ -n "$PHP_FILES" ]; then
#    echo "⚡ Running PHP-CS-Fixer on changed PHP files..."
#    (cd backend && vendor/bin/php-cs-fixer fix --quiet $PHP_FILES)
#
#    if [ $? -ne 0 ]; then
#        echo "❌ PHP-CS-Fixer encountered an error."
#        exit 1
#    fi
#
#    git add $PHP_FILES
#    echo "✅ PHP-CS-Fixer completed."
#fi


# Run ESLint only on changed JS/TS files inside `frontend/src`
JS_TS_FILES=$(echo "$CHANGED_FILES" | grep -E '^frontend/src/.*\.(js|jsx|ts|tsx)$')

if [ -n "$JS_TS_FILES" ]; then
    echo "⚡ Running ESLint on changed JavaScript/TypeScript files inside frontend/src..."

    # Convert full paths to relative paths for ESLint
    RELATIVE_JS_TS_FILES=$(echo "$JS_TS_FILES" | sed 's|frontend/||g')

    (cd frontend && npx eslint --fix $RELATIVE_JS_TS_FILES --quiet)

    if [ $? -ne 0 ]; then
        echo "❌ ESLint failed to fix all issues."
        exit 1
    fi

    git add $JS_TS_FILES
    echo "✅ ESLint completed."
fi

# Run TypeScript check only if changed TS files exist
TS_FILES=$(echo "$CHANGED_FILES" | grep -E '^frontend/.*\.(ts|tsx)$')
if [ -n "$TS_FILES" ]; then
    echo "⚡ Running TypeScript type check..."
    (cd frontend && npx tsc --noEmit --pretty --skipLibCheck)

    if [ $? -ne 0 ]; then
        echo "❌ TypeScript errors found. Please fix them before committing."
        exit 1
    fi

    echo "✅ TypeScript type check completed."
fi

echo -e "${GREEN}✅ All checks passed! Proceeding with commit.${NC}"
exit 0
